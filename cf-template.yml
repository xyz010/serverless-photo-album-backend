AWSTemplateFormatVersion: '2010-09-09'
Description: Photo Album Web App
Parameters:
  GitHubRepo:
    Type: String

  GitHubBranch:
    Type: String

  GitHubToken:
    Type: String

  GitHubUser:
    Type: String
  
Resources:
  ############################################
  ####### S3 Buckets #########################
  ############################################
  AssetsBucket:
    Type: AWS::S3::Bucket
    DependsOn: S3toLF1trigger
    Properties:
      BucketName: bucketb2-cf
      AccessControl: PublicReadWrite
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
            MaxAge: 3600
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - PUT
            AllowedOrigins:
              - '*'
            MaxAge: 3600
      PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function:
              Fn::GetAtt:
              - LF1
              - Arn
  ClientBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: photo-web-app.com-cf
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
            MaxAge: 3600
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - PUT
            AllowedOrigins:
              - '*'
            MaxAge: 3600
      PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
  BucketPolicyClient:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ClientBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 
            - 's3:GetObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ClientBucket
                - '/*'
            Principal: '*'
  BucketPolicyAssets:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AssetsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 
            - 's3:*'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref AssetsBucket
                - '/*'
            Principal: '*'
  S3toLF1trigger:
    Type: AWS::Lambda::Permission
    # DependsOn: LF1
    Properties:
      FunctionName:
        Ref: LF1
        # Fn::GetAtt:
        #     - LF1
        #     - Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: arn:aws:s3:::bucketb2-cf
  ############################################
  ####### Lambda #############################
  ############################################
  AllLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AllLambdaRole
      Path: /service-role/
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - 'arn:aws:iam::783455253012:policy/LambdaLexV2Policy'
        - 'arn:aws:iam::aws:policy/AmazonLexFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRekognitionFullAccess'
      Policies:
        - PolicyName: MyLambdaFunctionPolicy
          PolicyDocument:
            Statement:
              - Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
              - Action:
                - s3:GetObject
                Effect: Allow
                Resource: arn:aws:s3:::assignment-2-lambdas/*
            Version: '2012-10-17'
  LF1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LF1-index-photos-cf
      Code:
        S3Bucket: assignment-2-lambdas
        S3Key: lf1-cf-v4.zip
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllLambdaRole.Arn
      Runtime: python3.9
      Timeout: 60
  LF2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LF2-search-photos-cf
      Code:
        S3Bucket: assignment-2-lambdas
        S3Key: lf2-cf-v4.zip
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllLambdaRole.Arn
      Runtime: python3.9
      Timeout: 60
  ############################################
  ####### Open Search ########################
  ############################################
  OpenSearchServiceDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: 'photos-cf'
      EngineVersion: 'OpenSearch_2.5'
      ClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: '1'
        ZoneAwarenessEnabled: false
        InstanceType: 't3.small.search'
      EBSOptions:
        EBSEnabled: true
        Iops: '3000'
        VolumeSize: '10'
        VolumeType: 'gp3'
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: false
        MasterUserOptions:
          MasterUserARN: !Join [ '', ['arn:aws:iam::783455253012:role/service-role/', !Ref AllLambdaRole] ]
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource: 'arn:aws:es:us-east-1:783455253012:domain/photos-cf/*'
      EncryptionAtRestOptions:
        Enabled: true
      NodeToNodeEncryptionOptions: 
        Enabled: true
      DomainEndpointOptions:
        EnforceHTTPS: true
  ############################################
  ####### API GATEWAY ########################
  ############################################
  PhotoAlbumAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      BodyS3Location: 
        Bucket: assignment-2-lambdas
        Key: api-cf-swagger-2.yaml
      EndpointConfiguration: 
         Types: 
          - REGIONAL

  LF2InvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: LF2
    Properties:
      FunctionName:
        Fn::GetAtt:
          - LF2
          - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PhotoAlbumAPI}/*"
  
  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref PhotoAlbumAPI
      StageName: 'v1'

Outputs:
  WebsiteURL:
    Value: !GetAtt
      - ClientBucket
      - WebsiteURL
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - ClientBucket
          - DomainName
    Description: Name of S3 bucket to hold website content